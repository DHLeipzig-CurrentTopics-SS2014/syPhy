import org.gradle.api.JavaVersion

apply plugin: 'java'
apply plugin: 'scala'

apply plugin: 'eclipse'
apply plugin: 'idea'

sourceCompatibility = JavaVersion.VERSION_1_7
targetCompatibility = JavaVersion.VERSION_1_7

ext {
    scalaVersion = '2.10'
    scalaMinor = '4'

    slf4jVersion = '1.6.1'
    bluePrintsVersion = '2.5.+'
    graphStreamVersion = '1.2'

    logDir = projectDir.toPath().resolve("logs").toString()
    nameSep = File.separator
    noLogBackConf = {
        exclude group: "ch.qos.logback"
    }
}

repositories {
    mavenCentral()
    flatDir name: 'local', dirs: file('libs')
}

configurations {
    scalaCompiler
    scalaLibrary
}

dependencies {
    scalaCompiler "org.scala-lang:scala-compiler:$scalaVersion.$scalaMinor"
    scalaLibrary "org.scala-lang:scala-library:$scalaVersion.$scalaMinor"

    compile "org.scala-lang:scala-library:$scalaVersion.$scalaMinor"
    
    compile 'com.google.guava:guava:17.+'
    //compile 'com.google.code.findbugs:jsr305:1.3.+'
    compile 'com.netflix.rxjava:rxjava-scala:0.19.+'
    compile "org.clapper:grizzled-slf4j_$scalaVersion:1.+"
    compile "org.clapper:grizzled-scala_$scalaVersion:1.+"
    compile "org.slf4j:slf4j-log4j12:$slf4jVersion"

    compile "com.michaelpollmeier:gremlin-scala_$scalaVersion:$bluePrintsVersion"
    compile("com.tinkerpop.blueprints:blueprints-neo4j2-graph:$bluePrintsVersion", project.noLogBackConf)
    compile("org.neo4j:neo4j:2.0.+", project.noLogBackConf)

    compile "org.graphstream:gs-core:$graphStreamVersion"
    compile "org.graphstream:gs-ui:$graphStreamVersion"

    testCompile "org.scalatest:scalatest_$scalaVersion:2.+"
    testCompile "org.scalamock:scalamock-scalatest-support_$scalaVersion:3.+"
}

sourceSets {
    main {
        scala {
            sourceSets.main.java.srcDirs.each { srcDir(it) }
        }
        output.resourcesDir = output.classesDir
    }

    test {
        scala {
            sourceSets.test.java.srcDirs.each { srcDir(it) }
        }
        output.resourcesDir = output.classesDir
    }
}

tasks.withType(JavaCompile) { //we compile also all Java source code with the Zinc Scala Compiler
    enabled = false
}

tasks.withType(ScalaCompile) {
    scalaCompileOptions.useCompileDaemon = false
    scalaCompileOptions.useAnt = true
    scalaCompileOptions.additionalParameters = ["-target:jvm-$targetCompatibility".toString()]
}

task filterProperties(type: Copy) {
    from(processResources.source)
    into(processResources.destinationDir)

    include('*.properties')
    expand(project.properties)
    filter { String line -> line.replace('\\', '\\\\') } //escape backslashes for property files
}

task filterPropertiesInLog4jConfig(type: Copy) {
    from(processResources.source)
    into(processResources.destinationDir)

    include('log4j.xml')
    expand(project.properties)
}

processResources {
    dependsOn(filterProperties, filterPropertiesInLog4jConfig)

    exclude('*.properties')
    exclude('log4j.xml')
}

idea {
    module {
        inheritOutputDirs = false
        outputDir = sourceSets.main.output.classesDir
        testOutputDir = sourceSets.test.output.classesDir

        downloadSources = true
        downloadJavadoc = true
    }
}

eclipse {
    /*jdt {
        sourceCompatibility = project.sourceCompatibility
        targetCompatibility = project.targetCompatibility
    }*/

    classpath {
        defaultOutputDir = sourceSets.main.output.classesDir

        downloadSources = true
        downloadJavadoc = true
    }

}

task view << {
    println(logdir)
}
